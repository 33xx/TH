
# @Jmthon


import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "الاوامر":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "꙳ ¦ قائمه الاوامر\n\n⌔ ¦ م1 -› لعرض اوامر الادمن\n꙳ ¦ م2 -› لعرض اوامر التسليه\n꙳ ¦ م3 -› لعرض اوامر الترحيب\n꙳ ¦ م4 -› لعرض اوامر الردود\n꙳ ¦ م5 -› لعرض اوامر الرفع\n꙳ ¦ م6 -› لعرض اوامر الحمايه\n꙳ ¦ م7 -› لعرض اوامر التليـكراف\n꙳ ¦ م8 -› لعرض اوامر حمايه المجموعه\n꙳ ¦ م9 -› لعرض اوامر التاك\n꙳ ¦ م10 -› لعرض اوامر الكشف\n꙳ ¦ م11 -› لعرض اوامر تحويل الصيغ\n꙳ ¦ م12 -› لعرض اوامر الترجمه\n꙳ ¦ م13 -› لعرض اوامر البحث\n꙳ ¦ م14 -› لعرض اوامر الانتحال\n꙳ ¦ م15 -› لعرض اوامر النت\n꙳ ¦ م16 -› لعرض اوامر البوت\n꙳ ¦ م17 -› لعرض اوامر الحساب\n꙳ ¦ م18 -› لعرض اوامر التقليد\n꙳ ¦ م19 -› لعرض اوامر الحساب الوقتي\n꙳ ¦ م20 -› لعرض اوامر القائمه السوداء\n꙳ ¦ م21 -› لعرض الاوامر الجانبية \n꙳ ¦ م22 -› لعرض اوامر الملصقات \n꙳ ¦ م23 -› لعرض اوامر التمبلر\n꙳ ¦ م24 -› لعرض اوامر هيروكو\n꙳ ¦ م25 -› لعرض اوامر المتحركات\n\n -  ꙳ ¦  قنـاة الـسورس :  [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "꙳ ¦ قائمه الاوامر\n\n⌔ ¦ م1 -› لعرض اوامر الادمن\n꙳ ¦ م2 -› لعرض اوامر التسليه\n꙳ ¦ م3 -› لعرض اوامر الترحيب\n꙳ ¦ م4 -› لعرض اوامر الردود\n꙳ ¦ م5 -› لعرض اوامر الرفع\n꙳ ¦ م6 -› لعرض اوامر الحمايه\n꙳ ¦ م7 -› لعرض اوامر التليـكراف\n꙳ ¦ م8 -› لعرض اوامر حمايه المجموعه\n꙳ ¦ م9 -› لعرض اوامر التاك\n꙳ ¦ م10 -› لعرض اوامر الكشف\n꙳ ¦ م11 -› لعرض اوامر تحويل الصيغ\n꙳ ¦ م12 -› لعرض اوامر الترجمه\n꙳ ¦ م13 -› لعرض اوامر البحث\n꙳ ¦ م14 -› لعرض اوامر الانتحال\n꙳ ¦ م15 -› لعرض اوامر النت\n꙳ ¦ م16 -› لعرض اوامر البوت\n꙳ ¦ م17 -› لعرض اوامر الحساب\n꙳ ¦ م18 -› لعرض اوامر التقليد\n꙳ ¦ م19 -› لعرض اوامر الحساب الوقتي\n꙳ ¦ م20 -› لعرض اوامر القائمه السوداء\n꙳ ¦ م21 -› لعرض الاوامر الجانبية \n꙳ ¦ م22 -› لعرض اوامر الملصقات \n꙳ ¦ م23 -› لعرض اوامر التمبلر\n꙳ ¦ م24 -› لعرض اوامر هيروكو\n꙳ ¦ م25 -› لعرض اوامر المتحركات\n\n -  ꙳ ¦  قنـاة الـسورس :   [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


# @Jmthon


import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م1":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر حماية المجموعه \n\nالامر  ¦  `.وضع صوره` \nالاستخدام  ¦  بالرد على الصوره  \nالشرح ¦  لوضع صوره بروفايل للمجموعه \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\n الامر  ¦  `.رفع مشرف`\nالاستخدام ¦  بالرد على الشخص او كتابة الايدي او معرفه \nالشرح  ¦   لرفع شخص مشرف في المجموعة مع بعض الصلاحيات\n\n ➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.تك`\nالاستخدام  ¦   بالرد على الشخص او كتابة الايدي او معرفه \nالشرح  ¦   يقوم بتنزيل الشخص من رتبة  المشرفين وحذف جميع صلاحيات الاشراف \nملاحظة  ¦   لازم تكون انت الشخص الي رفعه او تكون مالك المجموعه حتى تنزله   \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\n الامر  ¦   `.حظر`\n الاستخدام ¦   بالرد على الشخص او كتابة الايدي او معرفه  ، \nالشرح  ¦  يقوم بحظر الشخص من المجموعه \n\n ➖➖➖➖➖➖➖➖➖➖➖➖➖\n\n الامر ¦  `.الغاء حظر`\nالاستخدام  ¦   بالرد على الشخص او كتابة الايدي او معرفه\nالشرح  ¦   يقوم بالغاء حظر الشخص من المجموعه \n\n ➖➖➖➖➖➖➖➖➖➖➖➖\n\n الامر  ¦   `.كتم`   + السبب «السبب مو اجباري»\nالاستخدام  ¦  بالرد على الشخص او كتابة الايدي او معرفه \nالشرح  ¦   يقوم بحذف جميع رسائل الشخص بالمجموعه وكذلك في الخاص يجب ان تمتلك صلاحيات حذف اولا \n\n ➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.الغاء كتم`\nالاستخدام  ¦   بالرد على الشخص او كتابة الايدي او معرفه\nالشرح  ¦  يقوم بالغاء كتم الشخص والسماح له بالتحدث بحرية  \n\n ➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.طرد`   + السبب «السبب مو اجباري»\nالاستخدام  ¦   بالرد على الشخص او كتابة الايدي او معرفه \nالشرح  ¦   يقوم بطرد الشخص من المجموعه \n\n ➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.تثبيت`   + بالاشعار «لعمل اشعار للاعضاء»\nالاستخدام  :  بالرد على النص التريد تثبيته \nالشرح  ¦   يقوم بتثبيت الرسالة في المجموعه او في الخاص\n\n ➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.الغاء التثبيت`   + للكل «لالغاء تثبيت جميع الرسائل»\nالاستخدام  :  بالرد على النص التريد تثبيته \nالشرح  ¦   يقوم بالغاء تثبيت الرسالة في المجموعه او في الخاص\n\n➖➖➖➖➖➖➖➖➖➖➖➖ \n\n الامر  ¦   `.الاحداث`   + عدد اخر رسائل تريد مشاهدتها\nالاستخدام  ¦   فقط ارسل الامر  `.الاحداث` مع رقم ما بين 1-15\nالشرح  ¦   يقوم بعرض الرسائل المحذوفة في المجموعه يجب اختيار مابين رقم 1-15 وسيقوم بعرضها \n\n ➖➖➖➖➖➖➖➖➖➖➖➖➖\n\n قنـاة السـورس ¦   [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر حماية المجموعه \n\nالامر ¦ `.وضع صوره` \nالاستخدام  ¦  بالرد على الصوره  \nالشرح ¦  لوضع صوره بروفايل للمجموعه \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\n الامر  ¦   `.رفع مشرف`\nالاستخدام ¦  بالرد على الشخص او كتابة الايدي او معرفه \nالشرح  ¦   لرفع شخص مشرف في المجموعة مع بعض الصلاحيات\n\n ➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.تك`\nالاستخدام  ¦   بالرد على الشخص او كتابة الايدي او معرفه \nالشرح  ¦   يقوم بتنزيل الشخص من رتبة  المشرفين وحذف جميع صلاحيات الاشراف \nملاحظة  ¦   لازم تكون انت الشخص الي رفعه او تكون مالك المجموعه حتى تنزله   \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\n الامر  ¦   `.حظر`\n الاستخدام  ¦   بالرد على الشخص او كتابة الايدي او معرفه  ، \nالشرح ¦  يقوم بحظر الشخص من المجموعه \n\n ➖➖➖➖➖➖➖➖➖➖➖➖➖\n\n الامر ¦  `.الغاء حظر`\nالاستخدام  ¦   بالرد على الشخص او كتابة الايدي او معرفه\nالشرح  ¦  يقوم بالغاء حظر الشخص من المجموعه \n\n ➖➖➖➖➖➖➖➖➖➖➖➖\n\n الامر  ¦   `.كتم`   + السبب «السبب مو اجباري»\nالاستخدام  ¦  بالرد على الشخص او كتابة الايدي او معرفه \nالشرح  ¦  يقوم بحذف جميع رسائل الشخص بالمجموعه وكذلك في الخاص يجب ان تمتلك صلاحيات حذف اولا \n\n ➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.الغاء كتم`\nالاستخدام  ¦   بالرد على الشخص او كتابة الايدي او معرفه\nالشرح  ¦  يقوم بالغاء كتم الشخص والسماح له بالتحدث بحرية  \n\n ➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر ¦   `.طرد`   + السبب «السبب مو اجباري»\nالاستخدام  ¦   بالرد على الشخص او كتابة الايدي او معرفه \nالشرح  ¦   يقوم بطرد الشخص من المجموعه \n\n ➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.تثبيت`   + بالاشعار «لعمل اشعار للاعضاء»\nالاستخدام  :  بالرد على النص التريد تثبيته \nالشرح  ¦   يقوم بتثبيت الرسالة في المجموعه او في الخاص\n\n ➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.الغاء التثبيت`   + للكل «لالغاء تثبيت جميع الرسائل»\nالاستخدام  :  بالرد على النص التريد تثبيته \nالشرح  ¦   يقوم بالغاء تثبيت الرسالة في المجموعه او في الخاص\n\n➖➖➖➖➖➖➖➖➖➖➖➖ \n\n الامر  ¦   `.الاحداث`   + عدد اخر رسائل تريد مشاهدتها\nالاستخدام  ¦   فقط ارسل الامر  `.الاحداث` مع رقم ما بين 1-15\nالشرح  ¦   يقوم بعرض الرسائل المحذوفة في المجموعه يجب اختيار مابين رقم 1-15 وسيقوم بعرضها \n\n ➖➖➖➖➖➖➖➖➖➖➖➖➖\n\n قنـاة السـورس ¦   [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


#@Jmthon 

import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م2":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "** قائـمه اوامر التسليه :**\n⌁ `.قمر`\n⌁ `.اقمار`\n⌁ `.قمور`\n⌁ `.قلوب`\n⌁ `.قلب `\n⌁ `.جيم`\n⌁ `.افكر`\n⌁ `.افكرر`\n⌁ `.شنوو `\n⌁ `.مح `\n⌁ `.متت `\n⌁ `.النضام الشمسي `\n⌁ `.موسيقى `\n⌁ `.قنبله `\n⌁ `.مكبعات `\n⌁ `.افعى `\n⌁ `.طائره `\n⌁ `.نجمه `\n⌁ `.دائره `\n⌁ `.شرطه `\n⌁ `.فايروس `\n⌁ `.غبي `\n⌁ `.العد التنازلي`\n - `.يد`\n - `.تهكير`\n - `.قرد `\n - `.بشره `\n - `.انيم `\n - `.نيكول `\n - `.مربع`\n - `.قاتل `\n - `.تحميل`\n - `.رجل `\n - `.شنوو `\n - `.ريبي `\n - `.تفريغ `\n - `.حلويات `\n - `.فليم`\n\n -  𝗦𝗼𝘂𝗿𝗰𝗲 𝗖𝗵𝗮𝗻𝗻𝗲𝗹 :  @Jmthon"
            )
        else:
            await event.edit(
                "** قائـمه اوامر التسليه :**\n⌁ `.قمر`\n⌁ `.اقمار`\n⌁ `.قمور`\n⌁ `.قلوب`\n⌁ `.قلب `\n⌁ `.جيم`\n⌁ `.افكر`\n⌁ `.افكرر`\n⌁ `.شنوو `\n⌁ `.مح `\n⌁ `.متت `\n⌁ `.النضام الشمسي `\n⌁ `.موسيقى `\n⌁ `.قنبله `\n⌁ `.مكبعات `\n⌁ `.افعى `\n⌁ `.طائره `\n⌁ `.نجمه `\n⌁ `.دائره `\n⌁ `.شرطه `\n⌁ `.فايروس `\n⌁ `.غبي `\n⌁ `.العد التنازلي`\n - `.يد`\n - `.تهكير`\n - `.قرد `\n - `.بشره `\n - `.انيم `\n - `.نيكول `\n - `.مربع`\n - `.قاتل `\n - `.تحميل`\n - `.رجل `\n - `.شنوو `\n - `.ريبي `\n - `.تفريغ `\n - `.حلويات `\n - `.فليم`\n\n -  𝗦𝗼𝘂𝗿𝗰𝗲 𝗖𝗵𝗮𝗻𝗻𝗲𝗹 :  @Jmthon"
            )


#@Jmthon 

import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م3":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر الترحيب  \n\nالامر  : `.ضع ترحيب` \nالاستخدام  : كتابه الترحيب مع الامر\nمثال : `.ضع ترحيب` - ههـلـو عـمـري ♥َ🦋ِ . \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  :  `.حذف ترحيب`\nالاستخدام :  فقط اكتب الامر حذف ترحيب\nالشرح  :  لحذف جميع الترحيبات لمجموعه معينة\n\n ➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  :  `.الترحيبات`\nالاستخدام  :  فقط اكتب الامر \nالشرح  :  يقوم بعرض الترحيب المضاف لمجموعة معينة\n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nقنـاة السـورس   : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر الترحيب  \n\nالامر  : `.ضع ترحيب` \nالاستخدام  : كتابه الترحيب مع الامر\nمثال : `.ضع ترحيب` - ههـلـو عـمـري ♥َ🦋ِ . \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  :  `.حذف ترحيب`\nالاستخدام :  فقط اكتب الامر حذف ترحيب\nالشرح  :  لحذف جميع الترحيبات لمجموعه معينة\n\n ➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  :  `.الترحيبات`\nالاستخدام  :  فقط اكتب الامر \nالشرح  :  يقوم بعرض الترحيب المضاف لمجموعة معينة\n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nقنـاة السـورس   : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


#@Jmthon 

import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م4":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر الردود \n\nالامر  ¦ `.اضاضف رد\nالاستخدام  ¦ بكتابة الرد مع الكلمه التي تريد ان ترسل \nالشرح ¦ شاهد شرح توضيحي اضغط هنا  \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.حذف رد`\nالاستخدام ¦  بكتابة الامر مع الرد \nالشرح  ¦  لحذف رد معين من دردشه معينة \n\n ➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.الردود`\nالاستخدام  ¦  فقط اكتب الامر \nالشرح  ¦  يقوم بعرض الردود الي تم اضافتها\n\n➖➖➖➖➖➖➖➖➖➖➖ \n\n\nالامر  ¦  `.حذف الردود`\nالاستخدام  ¦ فقط اكتب الرد \nالشرح  ¦ يقوم بحذف جميع الردود المضافه للدردشة\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس   ¦ [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر الردود \n\nالامر  ¦ `.اضاضف رد\nالاستخدام  ¦ بكتابة الرد مع الكلمه التي تريد ان ترسل \nالشرح ¦ شاهد شرح توضيحي اضغط هنا  \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.حذف رد`\nالاستخدام ¦  بكتابة الامر مع الرد \nالشرح  ¦  لحذف رد معين من دردشه معينة \n\n ➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.الردود`\nالاستخدام  ¦  فقط اكتب الامر \nالشرح  ¦  يقوم بعرض الردود الي تم اضافتها\n\n➖➖➖➖➖➖➖➖➖➖➖ \n\n\nالامر  ¦  `.حذف الردود`\nالاستخدام  ¦ فقط اكتب الرد \nالشرح  ¦ يقوم بحذف جميع الردود المضافه للدردشة\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس   ¦ [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


#@Jmthon 

import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م5":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "* قائـمه اوامر الرفع :**\n⌁ `.رفع مطي `\n⌁ `.رفع جلب `\n⌁ `.رفع بكلبي `\n - `.رفع مرتي `\n⌁ `.رفع تاج `\n⌁ `.رفع جريذي `\n\n -  𝗦𝗼𝘂𝗿𝗰𝗲 𝗖𝗵𝗮𝗻𝗻𝗲𝗹 :  @Jmthon"
            )
        else:
            await event.edit(
                "* قائـمه اوامر الرفع :**\n⌁ `.رفع مطي `\n⌁ `.رفع جلب `\n⌁ `.رفع بكلبي `\n - `.رفع مرتي `\n⌁ `.رفع تاج `\n⌁ `.رفع جريذي `\n\n -  𝗦𝗼𝘂𝗿𝗰𝗲 𝗖𝗵𝗮𝗻𝗻𝗲𝗹 :  @Jmthon"
            )


#@Jmthon 

import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م6":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر الحماية\n\nالامر  ¦ `.الحماية` on/off\nالاستخدام  ¦ كتابه الامر مع on لتشغيله و off لتعطيله \nالشرح ¦ يستخدم هذا الامر لتفعيل خاصية حماية الخاص \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦ `.سماح`   او  `.س`\nالاستخدام ¦  فقط اكتب الامر \nالشرح  ¦  للموافقه على الشخص وجعله يتكلم بحرية في الخاص\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.رفض`  او  `.ر`\nالاستخدام  ¦  فقط اكتب الامر \nالشرح  ¦  يقوم برفض الشخص من الخاص واذا كرر سيتم حظره تلقائيا\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦ `.بلوك`\nالاستخدام  ¦ كتابه الامر فقط في الخاص\nالشرح ¦ يستخدم هذا الامر لحظر شخص من الخاص فقط قم بالرد عليه\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦ `.انبلوك`\nالاستخدام ¦  فقط اكتب الامر مع السبب او بدون \nالشرح  ¦  يستخدم هذا الامر لحظر شخص من الخاص فقط قم بالرد عليه \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.المسموح لهم`\nالاستخدام  ¦  فقط اكتب الامر \nالشرح  ¦  يقوم بعرض قائمه الاشخاص الذي تم الموافقة عليهم والذي تم رفضهم من الخاص\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس   : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر الحماية\n\nالامر  ¦ `.الحماية` on/off\nالاستخدام  ¦ كتابه الامر مع on لتشغيله و off لتعطيله \nالشرح ¦ يستخدم هذا الامر لتفعيل خاصية حماية الخاص \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦ `.سماح`   او  `.س`\nالاستخدام ¦  فقط اكتب الامر \nالشرح  ¦  للموافقه على الشخص وجعله يتكلم بحرية في الخاص\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.رفض`  او  `.ر`\nالاستخدام  ¦  فقط اكتب الامر \nالشرح  ¦  يقوم برفض الشخص من الخاص واذا كرر سيتم حظره تلقائيا\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦ `.بلوك`\nالاستخدام  ¦ كتابه الامر فقط في الخاص\nالشرح ¦ يستخدم هذا الامر لحظر شخص من الخاص فقط قم بالرد عليه\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦ `.انبلوك`\nالاستخدام ¦  فقط اكتب الامر مع السبب او بدون \nالشرح  ¦  يستخدم هذا الامر لحظر شخص من الخاص فقط قم بالرد عليه \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.المسموح لهم`\nالاستخدام  ¦  فقط اكتب الامر \nالشرح  ¦  يقوم بعرض قائمه الاشخاص الذي تم الموافقة عليهم والذي تم رفضهم من الخاص\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس   : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


#@Jmthon 

import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م7":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر التلكراف \n\nالامر  :  `.تلكراف نص`  \nالاستخدام :  ليقوم بصنع رابط تلكراف لمقالة او موضوع معين \nالشرح  :  قم بالرد على النص المراد تحويله الى رابط تلكراف\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  :  `.تلكراف ميديا` \nالاستخدام  :  ليقوم بصنع رابط تلكراف لصورة او فيديو او متحركه\nالشرح  :  قم بالرد على الصورة المراد تحويلها الى رابط تلكراف\n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nقنـاة السـورس   : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر التلكراف \n\nالامر  :  `.تلكراف نص`  \nالاستخدام :  ليقوم بصنع رابط تلكراف لمقالة او موضوع معين \nالشرح  :  قم بالرد على النص المراد تحويله الى رابط تلكراف\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  :  `.تلكراف ميديا` \nالاستخدام  :  ليقوم بصنع رابط تلكراف لصورة او فيديو او متحركه\nالشرح  :  قم بالرد على الصورة المراد تحويلها الى رابط تلكراف\n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nقنـاة السـورس   : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


#@Jmthon 

import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م8":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر  قفل وفتح الصلاحيات \n\nالامر  ¦ `.قفل` + الاضافة   |  `.فتح`  + الاضافة\nالاستخدام  ¦ تكتب قفل مع الاضافه لقفل شي من المجموعه ولفتحه ارسل  فتح مع الاضافع لفتحه\nمثال ¦  `.قفل الوسائط`  \nملاحظة  ¦ لرؤية الاضافات [اضغط هنا](https://t.me/Jmthon_tools/143) \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس  : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر  قفل وفتح الصلاحيات \n\nالامر  ¦ `.قفل` + الاضافة   |  `.فتح`  + الاضافة\nالاستخدام  ¦ تكتب قفل مع الاضافه لقفل شي من المجموعه ولفتحه ارسل  فتح مع الاضافع لفتحه\nمثال ¦  `.قفل الوسائط`  \nملاحظة  ¦ لرؤية الاضافات [اضغط هنا](https://t.me/Jmthon_tools/143) \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس  : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


#@Jmthon 

import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م9":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر المنشن   \n\nالامر  ¦ `.تاك` + معرف الشخص  + الرسالة\nالشرح  ¦ لعمل تاك لشخص ووضع التاك داخل الرسالة شاهد المثال وجرب بنفسك\nمثال ¦ `.تاك` @RRRD7  ههلا\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.للكل`  + الرسالة\nالاستخدام ¦  لعمل تاك للكل مع الرسالة\nمثال  ¦ `.للكل` هههلا\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  .ابلاغ\nالاستخدام  ¦  قم بكتابه الامر فقط\nالشرح  ¦  سيقوم بعمل تاك لمشرفين المجموعه\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس   : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر المنشن   \n\nالامر  ¦ `.تاك` + معرف الشخص  + الرسالة\nالشرح  ¦ لعمل تاك لشخص ووضع التاك داخل الرسالة شاهد المثال وجرب بنفسك\nمثال ¦ `.تاك` @RRRD7  ههلا\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.للكل`  + الرسالة\nالاستخدام ¦  لعمل تاك للكل مع الرسالة\nمثال  ¦ `.للكل` هههلا\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  .ابلاغ\nالاستخدام  ¦  قم بكتابه الامر فقط\nالشرح  ¦  سيقوم بعمل تاك لمشرفين المجموعه\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس   : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


#@Jmthon 

import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م10":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر الكشف   \n\nالامر  ¦ `.الايدي` \nالشرح  ¦ لاظهار ايدي الشخص و المجموعه فقط قم بالرد على الشخص \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.ايدي` \nالاستخدام ¦  بالرد او مع الايدي او بالمعرف \nالشرح  ¦ يقوم باظهار معلومات عن الشخص \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.رابط الحساب` \nالاستخدام  ¦  بالرد او المعرف او الايدي\nالشرح  ¦  سيقوم بعمل رابط لحساب الشخص \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس   : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر الكشف   \n\nالامر  ¦ `.الايدي` \nالشرح  ¦ لاظهار ايدي الشخص و المجموعه فقط قم بالرد على الشخص \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.ايدي` \nالاستخدام ¦  بالرد او مع الايدي او بالمعرف \nالشرح  ¦ يقوم باظهار معلومات عن الشخص \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.رابط الحساب` \nالاستخدام  ¦  بالرد او المعرف او الايدي\nالشرح  ¦  سيقوم بعمل رابط لحساب الشخص \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس   : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


#@Jmthon #


import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م11":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر التحويل\n\nالامر  : `.تحويل صورة`\nالاستخدام  : الرد على الملصق لتحويله صورة\nالشرح  :  لتحويل الملصق الى صورة \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  :  `.تحويل ملصق`\nالاستخدام :  بالرد على الصورة\nالشرح  :  قم بالرد على الصورة وسيتم تحويلها الى ملصق\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  :  `.تحويل متحركه`\nالاستخدام  : بالرد على الملصق المتحرك\nالشرح  :  يقوم بتحويل الملصق المتحرك الى متحركه \n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nالامر  :  `.تحويل voice`\nالاستخدام  : بالرد على الاغنيه \nالشرح  :  يقوم بتحويل الاغنيه  على شكل مقطع بصمة \n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nالامر  :  `.تحويل mp3`\nالاستخدام  : بالرد على البصمه او المقطع الصوتي\nالشرح  :  يقوم بتحويل النقطع الصوتي الى اغنية\n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nقنـاة السـورس  :  [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر التحويل\n\nالامر  : `.تحويل صورة`\nالاستخدام  : الرد على الملصق لتحويله صورة\nالشرح  :  لتحويل الملصق الى صورة \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  :  `.تحويل ملصق`\nالاستخدام :  بالرد على الصورة\nالشرح  :  قم بالرد على الصورة وسيتم تحويلها الى ملصق\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  :  `.تحويل متحركه`\nالاستخدام  : بالرد على الملصق المتحرك\nالشرح  :  يقوم بتحويل الملصق المتحرك الى متحركه \n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nالامر  :  `.تحويل voice`\nالاستخدام  : بالرد على الاغنيه \nالشرح  :  يقوم بتحويل الاغنيه  على شكل مقطع بصمة \n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nالامر  :  `.تحويل mp3`\nالاستخدام  : بالرد على البصمه او المقطع الصوتي\nالشرح  :  يقوم بتحويل النقطع الصوتي الى اغنية\n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nقنـاة السـورس  :  [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


#@Jmthon 

import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م12":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر  الترجمه \n\nالامر  ¦ `.ترجمه ar`    |  `.ترجمه en \n`الاستخدام  ¦ ترد على النص المراد ترجمته \nالشرح ¦  اذا تريد ترجمه من اب لغة للعربية رد على الرسالة بـ `.ترجمه ar`  \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس  : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر  الترجمه \n\nالامر  ¦ `.ترجمه ar`    |  `.ترجمه en \n`الاستخدام  ¦ ترد على النص المراد ترجمته \nالشرح ¦  اذا تريد ترجمه من اب لغة للعربية رد على الرسالة بـ `.ترجمه ar`  \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس  : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


#@Jmthon 

import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م13":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر البحث  \n\nالامر  ¦ `.بحث` \nالاستخدام  ¦ كتابة اسم الاغنية مع الامر \nالشرح ¦ هذا الامر يقوم بجلب مقطع صوتي للاغنيه  \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.سكرين `\nالاستخدام ¦  بكتابة اسم الموقع او النص \nالشرح  ¦  يقوم باخذ لقطه شاشه من متصفح كوكل كروم\n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nقنـاة السـورس   ¦ [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر البحث  \n\nالامر  ¦ `.بحث` \nالاستخدام  ¦ كتابة اسم الاغنية مع الامر \nالشرح ¦ هذا الامر يقوم بجلب مقطع صوتي للاغنيه  \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.سكرين `\nالاستخدام ¦  بكتابة اسم الموقع او النص \nالشرح  ¦  يقوم باخذ لقطه شاشه من متصفح كوكل كروم\n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nقنـاة السـورس   ¦ [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


########### by ~ @Jmthon ###########


import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م14":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "**اوامر  الانتحال** \n\nالامر  ¦ `.انتحال`  \n`الاستخدام ¦ بالايدي او المعرف او الرد \nالشرح ¦   لنسخ حساب الضحيه بالكامل من صورة واسك وبايو..... والخ \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n \n\nالامر  ¦ `.اعادة`  \n`الاستخدام  ¦ بالايدي او المعرف او الرد \nالشرح ¦   لاعادة الحساب كما كان بالاول\n ملاحظة  ¦ بعد ارسال امر اعادة لن يظهر شي لكن الحساب سيرجع طبيعي\n\n➖➖➖➖➖➖➖➖➖➖➖➖\n\n قنـاة السـورس  : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "**اوامر  الانتحال** \n\nالامر  ¦ `.انتحال`  \n`الاستخدام ¦ بالايدي او المعرف او الرد \nالشرح ¦   لنسخ حساب الضحيه بالكامل من صورة واسك وبايو..... والخ \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n \n\nالامر  ¦ `.اعادة`  \n`الاستخدام  ¦ بالايدي او المعرف او الرد \nالشرح ¦   لاعادة الحساب كما كان بالاول\n ملاحظة  ¦ بعد ارسال امر اعادة لن يظهر شي لكن الحساب سيرجع طبيعي\n\n➖➖➖➖➖➖➖➖➖➖➖➖\n\n قنـاة السـورس  : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


#@Jmthon 

import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م15":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر  النت \n\nالامر  ¦ `.بنك`  \n`الاستخدام ¦ فقط ارسل الامر \nالشرح ¦   لرؤية سرعة البوت لديك \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n \n\nالامر  ¦ `.سرعة النت`  \n`الاستخدام  ¦  فقط ارسل الامر \nالشرح ¦   لرؤية سرعة الانترنت لدى البوت\n\n➖➖➖➖➖➖➖➖➖➖➖➖\n\n قنـاة السـورس  : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر  النت \n\nالامر  ¦ `.بنك`  \n`الاستخدام ¦ فقط ارسل الامر \nالشرح ¦   لرؤية سرعة البوت لديك \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n \n\nالامر  ¦ `.سرعة النت`  \n`الاستخدام  ¦  فقط ارسل الامر \nالشرح ¦   لرؤية سرعة الانترنت لدى البوت\n\n➖➖➖➖➖➖➖➖➖➖➖➖\n\n قنـاة السـورس  : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


#@Jmthon 

import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م16":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر  التشغيل \n\nالامر  ¦ `.اعادة تشغيل`  \nالاستخدام  ¦ فقط اكتب الامر \nالشرح ¦  ولذلك لإعادة تغشيل البوت اذا صادف مشاكل \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n \n\nالامر  ¦ `.تحديث`  \nالاستخدام  ¦ فقط اكتب الامر \nالشرح ¦   لتحديث البوت اذا اضاف المطورين تحديثات \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\n قنـاة السـورس  : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر  التشغيل \n\nالامر  ¦ `.اعادة تشغيل`  \nالاستخدام  ¦ فقط اكتب الامر \nالشرح ¦  ولذلك لإعادة تغشيل البوت اذا صادف مشاكل \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n \n\nالامر  ¦ `.تحديث`  \nالاستخدام  ¦ فقط اكتب الامر \nالشرح ¦   لتحديث البوت اذا اضاف المطورين تحديثات \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\n قنـاة السـورس  : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


#@Jmthon 
import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م17":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر االبروفايل\n\nالامر ¦ `.وضع بايو`\nالاستخدام  ¦  بكتابة البايو مع الامر \nالشرح ¦  لوضع بايو لبروفايلك الشخصي\n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.وضع صورة`\nالاستخدام ¦  بالرد على الصورة\nالشرح  ¦   لوضع صورة لبروفايلك الشخصي\n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.وضع اسم`\nالاستخدام  ¦   بكتابة الاسم مع الامر\nالشرح  ¦   لوضع اسم لبروفايلك الشخصي   \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.وضع معرف`\nالاستخدام  ¦   بكتابة المعرف مع الامر\nالشرح ¦  لوضع معرف جديد لبروفايلك الشخصي\n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر ¦  `.حذف صورة`\n\nالاستخدام  ¦   فقط اكتب الامر\nالشرح  ¦  يقوم بحذف صورة واحدة من بروفايلك\n\n➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.الحساب`  \nالاستخدام  ¦  فقط اكتب الامر\nالشرح  ¦  يقوك باظهار تقسيم مبسط لحسابك من الدردشات والمجموعات جربه بنفسك\n\n➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.انشائي`\nالاستخدام  ¦   فقط اكتبالامر\nالشرح  ¦  يقوم بأظهار جميع القنوات والمجموعات التي قمت بأنشائها  \n\n➖➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس ¦  [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر االبروفايل\n\nالامر ¦ `.وضع بايو`\nالاستخدام  ¦  بكتابة البايو مع الامر \nالشرح ¦  لوضع بايو لبروفايلك الشخصي\n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.وضع صورة`\nالاستخدام ¦  بالرد على الصورة\nالشرح  ¦   لوضع صورة لبروفايلك الشخصي\n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.وضع اسم`\nالاستخدام  ¦   بكتابة الاسم مع الامر\nالشرح  ¦   لوضع اسم لبروفايلك الشخصي   \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.وضع معرف`\nالاستخدام  ¦   بكتابة المعرف مع الامر\nالشرح ¦  لوضع معرف جديد لبروفايلك الشخصي\n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر ¦  `.حذف صورة`\n\nالاستخدام  ¦   فقط اكتب الامر\nالشرح  ¦  يقوم بحذف صورة واحدة من بروفايلك\n\n➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.الحساب`  \nالاستخدام  ¦  فقط اكتب الامر\nالشرح  ¦  يقوك باظهار تقسيم مبسط لحسابك من الدردشات والمجموعات جربه بنفسك\n\n➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.انشائي`\nالاستخدام  ¦   فقط اكتبالامر\nالشرح  ¦  يقوم بأظهار جميع القنوات والمجموعات التي قمت بأنشائها  \n\n➖➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس ¦  [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )


###########  by ~ @Jmthon ###########


import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م18":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر التقليد او اللزكة  \n\nالامر  ¦ `.تقليد` \nالاستخدام  ¦ بالرد او المعرف او الايدي\nالشرح ¦ بعد تفعيل الامر يقوم بتكرار جميع رسائل الشخص الذي فعلت عليه الامر  \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.الغاء التقليد `\nالاستخدام ¦  بالرد او الايدي او المعرف \nالشرح  ¦  لالغاء تقليد الشخص وعدم ارسال رسائله\n\n ➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.المقلدهم`\nالاستخدام  ¦  فقط اكتب الامر \nالشرح  ¦  يقوم بعرض الاشخاص الي تم تقليدهم\n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nقنـاة السـورس   ¦ [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر التقليد او اللزكة  \n\nالامر  ¦ `.تقليد` \nالاستخدام  ¦ بالرد او المعرف او الايدي\nالشرح ¦ بعد تفعيل الامر يقوم بتكرار جميع رسائل الشخص الذي فعلت عليه الامر  \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.الغاء التقليد `\nالاستخدام ¦  بالرد او الايدي او المعرف \nالشرح  ¦  لالغاء تقليد الشخص وعدم ارسال رسائله\n\n ➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.المقلدهم`\nالاستخدام  ¦  فقط اكتب الامر \nالشرح  ¦  يقوم بعرض الاشخاص الي تم تقليدهم\n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nقنـاة السـورس   ¦ [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )

#@Jmthon 


import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م19":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر الوقتي   \n\nالامر  ¦ `.اسم وقتي ` \nالاستخدام  ¦ اكتب الامر فقطnالشرح ¦ بعد تفعيل الامر يقوم بعرض وقت مع اسمك يتغير كل دقيقه مع تغير الوقت   \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.البايو الوقتي `\nالاستخدام ¦  فقط اكتب الامر \nالشرح  ¦  لعرض وقت يتغير مع النبذة \n\n ➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.انهاء + الامر`\nالاستخدام  ¦  فقط اكتب الامر \nالشرح  ¦  يقوم بايقاف الامر من قائمه الوقتي فقط \nمثال ¦ .انهاء اسم وقتي \n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nقنـاة السـورس   ¦ [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر الوقتي   \n\nالامر  ¦ `.اسم وقتي ` \nالاستخدام  ¦ اكتب الامر فقطnالشرح ¦ بعد تفعيل الامر يقوم بعرض وقت مع اسمك يتغير كل دقيقه مع تغير الوقت   \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.البايو الوقتي `\nالاستخدام ¦  فقط اكتب الامر \nالشرح  ¦  لعرض وقت يتغير مع النبذة \n\n ➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.انهاء + الامر`\nالاستخدام  ¦  فقط اكتب الامر \nالشرح  ¦  يقوم بايقاف الامر من قائمه الوقتي فقط \nمثال ¦ .انهاء اسم وقتي \n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nقنـاة السـورس   ¦ [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
            
            #Jmthon 
            
import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م20":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر القائمة السوداء   \n\nالامر  : `.منع` \nالاستخدام  : اكتب الامر مع الكلمه المراد منعها \nالشرح : يقوم هذا الامر بمنع كلمه من المجموعه او الخاص ويقوم بحذفها يجب ان تكون لديك صلاحيات حذف   \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  :  `.الغاء منع `\nالاستخدام :  اكتب الامر مع الكلمة الذي تم منعها  \nالشرح  :  يقوم بالسماح للكلمة وعدم حذفها في الدردشه \n\n ➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  :  `.القائمة السوداء`\nالاستخدام  :  فقط اكتب الامر \nالشرح  :  يقوم بأظهار الكلمات الذب تم منعها من الدردشة  \n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nقنـاة السـورس   : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر القائمة السوداء   \n\nالامر  : `.منع` \nالاستخدام  : اكتب الامر مع الكلمه المراد منعها \nالشرح : يقوم هذا الامر بمنع كلمه من المجموعه او الخاص ويقوم بحذفها يجب ان تكون لديك صلاحيات حذف   \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  :  `.الغاء منع `\nالاستخدام :  اكتب الامر مع الكلمة الذي تم منعها  \nالشرح  :  يقوم بالسماح للكلمة وعدم حذفها في الدردشه \n\n ➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  :  `.القائمة السوداء`\nالاستخدام  :  فقط اكتب الامر \nالشرح  :  يقوم بأظهار الكلمات الذب تم منعها من الدردشة  \n\n➖➖➖➖➖➖➖➖➖➖➖ \n\nقنـاة السـورس   : [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
            
            
           #Jmthon
           
import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م21":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر الجانبية\n\nالامر ¦ `.تكرار `\nالاستخدام  ¦  بكتابة الامر مع الرقمىومع الكلمة \nالشرح ¦  ليقوم بتكرار النص\nمثال ¦ .تكرار 10 جمثون\n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.سبام`\nالاستخدام ¦ بكتابة الكلمة مع الامر \nالشرح  ¦   يقوم بتفصيخ الكلمه حرف حرف \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.تنصيب`\nالاستخدام  ¦   بكتابة الامر بالرد على الملف \nالشرح  ¦   لتنصيب ملف خارجي للبوت  \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.الغاء التنصيب`\nالاستخدام  ¦   بكتابة الامر مع اسم الملف \nالشرح ¦  يقوم بحذف الملف من البوت لمدة 24 ساعة فقط\n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر ¦  `.تنظيف`\n\nالاستخدام  ¦  اكتب الامر بالرد على الرسالة\nالشرح  ¦  يقوم بحذف الرسائل اكتب الامر على رسالة معينة وسيقوم بحذف الرسائل التي تحتها بروفايلك\n\n➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.مسح`  \nالاستخدام  ¦  فقط اكتب الامر بالرد \nالشرح  ¦  يقوك بحذف الرسالة \n\n➖➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس ¦  [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
        else:
            await event.edit(
                "اوامر الجانبية\n\nالامر ¦ `.تكرار `\nالاستخدام  ¦  بكتابة الامر مع الرقمىومع الكلمة \nالشرح ¦  ليقوم بتكرار النص\nمثال ¦ .تكرار 10 جمثون\n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.سبام`\nالاستخدام ¦ بكتابة الكلمة مع الامر \nالشرح  ¦   يقوم بتفصيخ الكلمه حرف حرف \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.تنصيب`\nالاستخدام  ¦   بكتابة الامر بالرد على الملف \nالشرح  ¦   لتنصيب ملف خارجي للبوت  \n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.الغاء التنصيب`\nالاستخدام  ¦   بكتابة الامر مع اسم الملف \nالشرح ¦  يقوم بحذف الملف من البوت لمدة 24 ساعة فقط\n\n➖➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر ¦  `.تنظيف`\n\nالاستخدام  ¦  اكتب الامر بالرد على الرسالة\nالشرح  ¦  يقوم بحذف الرسائل اكتب الامر على رسالة معينة وسيقوم بحذف الرسائل التي تحتها بروفايلك\n\n➖➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `.مسح`  \nالاستخدام  ¦  فقط اكتب الامر بالرد \nالشرح  ¦  يقوك بحذف الرسالة \n\n➖➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس ¦  [𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON)"
            )
            
            #Jmthon
            
import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "م22":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "اوامر بوت التواصل   \n\nالامر  ¦   `/بلوك`  + السبب\nالشرح  ¦ لحظر شخص من بوت التواصل بالرد عليه\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `/انبلوك` \nالاستخدام ¦  بالرد عاى الشخص\nالشرح  ¦ يقوم بالغاء حظر الشخص من بوت التواصل \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `/معلومات`\nالاستخدام  ¦  بالرد على الشخص\nالشرح  ¦  سيقوم باظهار معلومات الشخص \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `/اذاعه`\nالاستخدام  ¦  بالرد على الرسالة\nالشرح  ¦  سيقوم بارسال الرسالة لجميع مستخدمي بوت التواصل\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.مستخدمين البوت`\nالاستخدام  ¦  فقط اكتب الامر\nالشرح  ¦  سيقوم باظهار معلومات المستخدمين \n\n➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.المحظورين`\nالاستخدام  ¦  فقط اكتبالامر\nالشرح  ¦  سيقوم باظهار معلومات الاشخاص المحظورين \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس   :[𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON) \n"
            )
        else:
            await event.edit(
                "اوامر بوت التواصل   \n\nالامر  ¦   `/بلوك`  + السبب\nالشرح  ¦ لحظر شخص من بوت التواصل بالرد عليه\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦   `/انبلوك` \nالاستخدام ¦  بالرد عاى الشخص\nالشرح  ¦ يقوم بالغاء حظر الشخص من بوت التواصل \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `/معلومات`\nالاستخدام  ¦  بالرد على الشخص\nالشرح  ¦  سيقوم باظهار معلومات الشخص \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `/اذاعه`\nالاستخدام  ¦  بالرد على الرسالة\nالشرح  ¦  سيقوم بارسال الرسالة لجميع مستخدمي بوت التواصل\n\n➖➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.مستخدمين البوت`\nالاستخدام  ¦  فقط اكتب الامر\nالشرح  ¦  سيقوم باظهار معلومات المستخدمين \n\n➖➖➖➖➖➖➖➖➖➖\n\nالامر  ¦  `.المحظورين`\nالاستخدام  ¦  فقط اكتبالامر\nالشرح  ¦  سيقوم باظهار معلومات الاشخاص المحظورين \n\n➖➖➖➖➖➖➖➖➖➖➖\n\nقنـاة السـورس   :[𝗝ََِ𝗠ٓ𝗧َُِْٓ𝗛ُ𝗢َ𝗡ٍَ](t.me/JMTHON) \n"
            )
            
            #Jmthon
            
            
import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "قائمه":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                "**قائمه اوامر جـمثون قم بضغط على الامر لنسخه :**\n⌁ `.ضع ترحيب`\n⌁ `.مسح ترحيب`\n⌁ `.الترحيبات `\n⌁ `.حظر`\n⌁ `.الغاء حظر`\n⌁ `.المحظورين`\n⌁ `.كتم`\n⌁ `.الغاء كتم`\n⌁ `.رفع` - مطي ، جلب\n⌁ `.تثبيت`\n⌁ `.الغاء تثبيت`\n⌁ `.الغاء تثبيت للكل`\n⌁ `.منع كلمه`\n⌁ `.الغاء منع`\n⌁ `.رفع مشرف`\n⌁ `.رفع مالك`\n⌁ `.تنظيف`  》》 يستخدم بالرد على الرساله\n⌁ `.انتحال`  》》لنسخ بروفايل الشخص\n⌁ `.اعادة` 》》لاعاده حسابك بعد نسخ الصوره.. الخ\n⌁ `نسبه الانوثه`\n⌁ `.اعادة التشغيل`\n⌁ `.تحديث`  》 لتحديث السورس\n⌁ `.بحث` 》 مثلا  `.بحث عشك`\n⌁ `.صورة` 》 مثلا  .صوره طياره\n⌁ `.ايدي` 》 لعرض معلومات البوت\n⌁ `.بنك`  》 يعرض البنك\n⌁ `.سرعة النت` 》 قياس سرعه النت\n⌁ `.ترجمة ar`\n⌁ `.ترجمة en` \n⌁ `.تكرار`+الرقم + الكلمه\n⌁ `.سبام`  》 كذالك نفس التكرار\n⌁ `.سماح` 》الامر فقط لميزه  حمايه الخاص\n⌁ `.رفض` 》 كذالك\n⌁ `.الكل` 》 لرفض الكل وتشغيل الحمايه\n⌁ `.بلوك` 》 من الخاص\n⌁ `.انبلوك` 》》لرفع الحظر من الخاص \n⌁ `.المسموح لهم` 》لعرض قائمه السماح\n⌁ `.ايدي` 》 لعرض معلومات المستخدم\n⌁ `.الايدي`\n⌁ `.السورس 》》 لعرض معلومات السورس `\n⌁ `.تاك` 》 لعمل تاك للكل\n⌁ `.للكل` + الكلام 》 لعمل تاك\n⌁ `.تلكراف ميديا` 》 يستخدم بالرد على الصوره\n⌁ `.تلكراف نص` 》 بالرد على الكتابه\n⌁ `.المطور` \n\n  -  𝗦𝗼𝘂𝗿𝗰𝗲 𝗖𝗵𝗮𝗻𝗻𝗲𝗹 :  @Jmthon"
            )
        else:
            await event.edit(
                "**قائمه اوامر جـمثون قم بضغط على الامر لنسخه :**\n⌁ `.ضع ترحيب`\n⌁ `.مسح ترحيب`\n⌁ `.الترحيبات `\n⌁ `.حظر`\n⌁ `.الغاء حظر`\n⌁ `.المحظورين`\n⌁ `.كتم`\n⌁ `.الغاء كتم`\n⌁ `.رفع` - مطي ، جلب\n⌁ `.تثبيت`\n⌁ `.الغاء تثبيت`\n⌁ `.الغاء تثبيت للكل`\n⌁ `.منع كلمه`\n⌁ `.الغاء منع`\n⌁ `.رفع مشرف`\n⌁ `.رفع مالك`\n⌁ `.تنظيف`  》》 يستخدم بالرد على الرساله\n⌁ `.انتحال`  》》لنسخ بروفايل الشخص\n⌁ `.اعادة` 》》لاعاده حسابك بعد نسخ الصوره.. الخ\n⌁ `نسبه الانوثه`\n⌁ `.اعادة التشغيل`\n⌁ `.تحديث`  》 لتحديث السورس\n⌁ `.بحث` 》 مثلا  `.بحث عشك`\n⌁ `.صورة` 》 مثلا  .صوره طياره\n⌁ `.ايدي` 》 لعرض معلومات البوت\n⌁ `.بنك`  》 يعرض البنك\n⌁ `.سرعة النت` 》 قياس سرعه النت\n⌁ `.ترجمة ar`\n⌁ `.ترجمة en` \n⌁ `.تكرار`+الرقم + الكلمه\n⌁ `.سبام`  》 كذالك نفس التكرار\n⌁ `.سماح` 》الامر فقط لميزه  حمايه الخاص\n⌁ `.رفض` 》 كذالك\n⌁ `.الكل` 》 لرفض الكل وتشغيل الحمايه\n⌁ `.بلوك` 》 من الخاص\n⌁ `.انبلوك` 》》لرفع الحظر من الخاص \n⌁ `.المسموح لهم` 》لعرض قائمه السماح\n⌁ `.ايدي` 》 لعرض معلومات المستخدم\n⌁ `.الايدي`\n⌁ `.السورس 》》 لعرض معلومات السورس `\n⌁ `.تاك` 》 لعمل تاك للكل\n⌁ `.للكل` + الكلام 》 لعمل تاك\n⌁ `.تلكراف ميديا` 》 يستخدم بالرد على الصوره\n⌁ `.تلكراف نص` 》 بالرد على الكتابه\n⌁ `.المطور` \n\n  -  𝗦𝗼𝘂𝗿𝗰𝗲 𝗖𝗵𝗮𝗻𝗻𝗲𝗹 :  @Jmthon"
            )


#@Jmthon 

import random

from telethon import events


@bot.on(events.NewMessage(pattern=r"\.(.*)", outgoing=True))
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    if input_str == "ديڤ":
        r = random.randint(0, 3)
        logger.debug(r)
        if r == 0:
            await event.edit(
                " 𝗗𝗘𝗩 𝗨𝗦𝗘𝗥 ↬ @JMTHON \n  𝗗𝗘𝗩 𝗜𝗗 ↬ 1614649021"
            )
        else:
            await event.edit(
                " 𝗗𝗘𝗩 𝗨𝗦𝗘𝗥 ↬ @JMTHON \n  𝗗𝗘𝗩 𝗜𝗗 ↬ 1614649021"
            )


#@Jmthon 

from telethon.tl.types import MessageEntityMentionName

TMP_DOWNLOAD_DIRECTORY = Config.TMP_DOWNLOAD_DIRECTORY


@bot.on(admin_cmd(pattern="رفع جلب(?: |$)(.*)"))
@bot.on(sudo_cmd(pattern="رفع جلب(?: |$)(.*)", allow_sudo=True))
async def permalink(mention):
    """For .link command, generates a link to the user's PM with a custom text."""
    user, custom = await get_user_from_event(mention)
    if not user:
        return
    if custom:
        await edit_or_reply(
            mention,
            f" المستخدم [{custom}](tg://user?id={user.id}) \n تـم رفعه جلب ",
        )
    else:
        tag = (
            user.first_name.replace("\u2060", "") if user.first_name else user.username
        )
        await edit_or_reply(
            mention,
            f"⌁ المستخدم [{tag}](tg://user?id={user.id}) \n ⌁ تـم رفعه جلب ",
        )


async def get_user_from_event(event):
    """Get the user from argument or replied message."""
    args = event.pattern_match.group(1).split(":", 1)
    extra = None
    if event.reply_to_msg_id and len(args) != 2:
        previous_message = await event.get_reply_message()
        user_obj = await event.client.get_entity(previous_message.sender_id)
        extra = event.pattern_match.group(1)
    elif len(args[0]) > 0:
        user = args[0]
        if len(args) == 2:
            extra = args[1]
        if user.isnumeric():
            user = int(user)
        if not user:
            await event.edit("`Pass the user's username, id or reply!`")
            return
        if event.message.entities:
            probable_user_mention_entity = event.message.entities[0]
            if isinstance(probable_user_mention_entity, MessageEntityMentionName):
                user_id = probable_user_mention_entity.user_id
                user_obj = await event.client.get_entity(user_id)
                return user_obj
        try:
            user_obj = await event.client.get_entity(user)
        except (TypeError, ValueError) as err:
            await event.edit(str(err))
            return None
    return user_obj, extra


async def ge(user, event):
    if isinstance(user, str):
        user = int(user)
    try:
        user_obj = await event.client.get_entity(user)
    except (TypeError, ValueError) as err:
        await event.edit(str(err))
        return None
    return user_obj


#@Jmthon 

from telethon.tl.types import MessageEntityMentionName

TMP_DOWNLOAD_DIRECTORY = Config.TMP_DOWNLOAD_DIRECTORY


@bot.on(admin_cmd(pattern="رفع مطي(?: |$)(.*)"))
@bot.on(sudo_cmd(pattern="رفع مطي(?: |$)(.*)", allow_sudo=True))
async def permalink(mention):
    """For .link command, generates a link to the user's PM with a custom text."""
    user, custom = await get_user_from_event(mention)
    if not user:
        return
    if custom:
        await edit_or_reply(
            mention,
            f"⌁ المستخدم [{custom}](tg://user?id={user.id}) \n ⌁ تم رفعه مطي هنا ",
        )
    else:
        tag = (
            user.first_name.replace("\u2060", "") if user.first_name else user.username
        )
        await edit_or_reply(
            mention,
            f"⌁ المستخدم [{tag}](tg://user?id={user.id}) \n ⌁ تم رفعه مطي هنا ",
        )


async def get_user_from_event(event):
    """Get the user from argument or replied message."""
    args = event.pattern_match.group(1).split(":", 1)
    extra = None
    if event.reply_to_msg_id and len(args) != 2:
        previous_message = await event.get_reply_message()
        user_obj = await event.client.get_entity(previous_message.sender_id)
        extra = event.pattern_match.group(1)
    elif len(args[0]) > 0:
        user = args[0]
        if len(args) == 2:
            extra = args[1]
        if user.isnumeric():
            user = int(user)
        if not user:
            await event.edit("`Pass the user's username, id or reply!`")
            return
        if event.message.entities:
            probable_user_mention_entity = event.message.entities[0]
            if isinstance(probable_user_mention_entity, MessageEntityMentionName):
                user_id = probable_user_mention_entity.user_id
                user_obj = await event.client.get_entity(user_id)
                return user_obj
        try:
            user_obj = await event.client.get_entity(user)
        except (TypeError, ValueError) as err:
            await event.edit(str(err))
            return None
    return user_obj, extra


async def ge(user, event):
    if isinstance(user, str):
        user = int(user)
    try:
        user_obj = await event.client.get_entity(user)
    except (TypeError, ValueError) as err:
        await event.edit(str(err))
        return None
    return user_obj


#@Jmthon 

from telethon.tl.types import MessageEntityMentionName

TMP_DOWNLOAD_DIRECTORY = Config.TMP_DOWNLOAD_DIRECTORY


@bot.on(admin_cmd(pattern="رفع مرتي(?: |$)(.*)"))
@bot.on(sudo_cmd(pattern="رفع مرتي(?: |$)(.*)", allow_sudo=True))
async def permalink(mention):
    """For .link command, generates a link to the user's PM with a custom text."""
    user, custom = await get_user_from_event(mention)
    if not user:
        return
    if custom:
        await edit_or_reply(
            mention,
            f"⌁ المستخدم [{custom}](tg://user?id={user.id}) \n ⌁ تـم رفعـه مـࢪتك مـشي نخـلف 😹🤤",
        )
    else:
        tag = (
            user.first_name.replace("\u2060", "") if user.first_name else user.username
        )
        await edit_or_reply(
            mention,
            f"⌁ المستخدم [{tag}](tg://user?id={user.id}) \n ⌁ تـم رفعـه مـࢪتك مـشي نخـلف 😹🤤",
        )


#@Jmthon 
from telethon.tl.types import MessageEntityMentionName

TMP_DOWNLOAD_DIRECTORY = Config.TMP_DOWNLOAD_DIRECTORY


@bot.on(admin_cmd(pattern="رفع تاج(?: |$)(.*)"))
@bot.on(sudo_cmd(pattern="رفع تاج(?: |$)(.*)", allow_sudo=True))
async def permalink(mention):
    """For .link command, generates a link to the user's PM with a custom text."""
    user, custom = await get_user_from_event(mention)
    if not user:
        return
    if custom:
        await edit_or_reply(
            mention,
            f"⌁ المستخدم [{custom}](tg://user?id={user.id}) \n ⌁ تـم رفعـه تـاج 👑🔥 ",
        )
    else:
        tag = (
            user.first_name.replace("\u2060", "") if user.first_name else user.username
        )
        await edit_or_reply(
            mention,
            f"⌁ المستخدم [{tag}](tg://user?id={user.id}) \n ⌁ تـم رفعـه تـاج 👑🔥 ",
        )


#@Jmthon 

from telethon.tl.types import MessageEntityMentionName

TMP_DOWNLOAD_DIRECTORY = Config.TMP_DOWNLOAD_DIRECTORY


@bot.on(admin_cmd(pattern="رفع بكلبي(?: |$)(.*)"))
@bot.on(sudo_cmd(pattern="رفع بكلبي(?: |$)(.*)", allow_sudo=True))
async def permalink(mention):
    """For .link command, generates a link to the user's PM with a custom text."""
    user, custom = await get_user_from_event(mention)
    if not user:
        return
    if custom:
        await edit_or_reply(
            mention,
            f"⌁ المستخدم [{custom}](tg://user?id={user.id}) \n ⌁ تـم رفعـه بڪلبك 🖤 ",
        )
    else:
        tag = (
            user.first_name.replace("\u2060", "") if user.first_name else user.username
        )
        await edit_or_reply(
            mention,
            f"⌁ المستخدم [{tag}](tg://user?id={user.id}) \n ⌁ تـم رفعـه بڪلبك 🖤 ",
        )


#@Jmthon 

from telethon.tl.types import MessageEntityMentionName

TMP_DOWNLOAD_DIRECTORY = Config.TMP_DOWNLOAD_DIRECTORY


@bot.on(admin_cmd(pattern="رفع جريذي(?: |$)(.*)"))
@bot.on(sudo_cmd(pattern="رفع جريذي(?: |$)(.*)", allow_sudo=True))
async def permalink(mention):
    """For .link command, generates a link to the user's PM with a custom text."""
    user, custom = await get_user_from_event(mention)
    if not user:
        return
    if custom:
        await edit_or_reply(
            mention,
            f"⌁ المستخدم [{custom}](tg://user?id={user.id}) \n ⌁ تـم رفعـه جـࢪيذي ۿنـا 😹🐀 ",
        )
    else:
        tag = (
            user.first_name.replace("\u2060", "") if user.first_name else user.username
        )
        await edit_or_reply(
            mention,
            f"⌁ المستخدم [{tag}](tg://user?id={user.id}) \n ⌁ تـم رفعـه جـࢪيذي ۿنـا 😹🐀 ",
        )


#@Jmthon 

from telethon.tl.types import MessageEntityMentionName

TMP_DOWNLOAD_DIRECTORY = Config.TMP_DOWNLOAD_DIRECTORY


@bot.on(admin_cmd(pattern="رفع فرخ(?: |$)(.*)"))
@bot.on(sudo_cmd(pattern="رفع فرخ(?: |$)(.*)", allow_sudo=True))
async def permalink(mention):
    """For .link command, generates a link to the user's PM with a custom text."""
    user, custom = await get_user_from_event(mention)
    if not user:
        return
    if custom:
        await edit_or_reply(
            mention,
            f"⌁ المستخدم [{custom}](tg://user?id={user.id}) \n ⌁ تم رفعه فرخ هنا ",
        )
    else:
        tag = (
            user.first_name.replace("\u2060", "") if user.first_name else user.username
        )
        await edit_or_reply(
            mention,
            f"⌁ المستخدم [{tag}](tg://user?id={user.id}) \n ⌁ تم رفعه فرخ هنا ",
        )


async def get_user_from_event(event):
    """Get the user from argument or replied message."""
    args = event.pattern_match.group(1).split(":", 1)
    extra = None
    if event.reply_to_msg_id and len(args) != 2:
        previous_message = await event.get_reply_message()
        user_obj = await event.client.get_entity(previous_message.sender_id)
        extra = event.pattern_match.group(1)
    elif len(args[0]) > 0:
        user = args[0]
        if len(args) == 2:
            extra = args[1]
        if user.isnumeric():
            user = int(user)
        if not user:
            await event.edit("`Pass the user's username, id or reply!`")
            return
        if event.message.entities:
            probable_user_mention_entity = event.message.entities[0]
            if isinstance(probable_user_mention_entity, MessageEntityMentionName):
                user_id = probable_user_mention_entity.user_id
                user_obj = await event.client.get_entity(user_id)
                return user_obj
        try:
            user_obj = await event.client.get_entity(user)
        except (TypeError, ValueError) as err:
            await event.edit(str(err))
            return None
    return user_obj, extra


async def ge(user, event):
    if isinstance(user, str):
        user = int(user)
    try:
        user_obj = await event.client.get_entity(user)
    except (TypeError, ValueError) as err:
        await event.edit(str(err))
        return None
    return user_obj


#@Jmthon 

import random

from telethon.tl.types import MessageEntityMentionName

ppp = [
    "100% 🔱💕.",
    "90%",
    "80%",
    "70%",
    "60%",
    "50%",
    "40%",
    "30%",
    "20%",
    "10%",
    "0%",
]


@bot.on(admin_cmd(pattern="نسبه الانوثه(?: |$)(.*)"))
@bot.on(sudo_cmd(pattern="نسبه الانوثه(?: |$)(.*)", allow_sudo=True))
async def permalink(mention):
    ioi = random.choice(ppp)
    user, custom = await get_user_from_event(mention)
    if not user:
        return
    if custom:
        await edit_or_reply(
            mention,
            f"⌁ نسبه الانوثه لـ [{custom}](tg://user?id={user.id}) هي {ioi} ",
        )
    else:
        tag = (
            user.first_name.replace("\u2060", "") if user.first_name else user.username
        )
        await edit_or_reply(
            mention,
            f"⌁ نسبه الانوثه لـ [{tag}](tg://user?id={user.id}) هي {ioi} ",
        )


async def get_user_from_event(event):
    """Get the user from argument or replied message."""
    args = event.pattern_match.group(1).split(":", 1)
    extra = None
    if event.reply_to_msg_id and len(args) != 2:
        previous_message = await event.get_reply_message()
        user_obj = await event.client.get_entity(previous_message.sender_id)
        extra = event.pattern_match.group(1)
    elif len(args[0]) > 0:
        user = args[0]
        if len(args) == 2:
            extra = args[1]
        if user.isnumeric():
            user = int(user)
        if not user:
            await event.edit("`Pass the user's username, id or reply!`")
            return
        if event.message.entities:
            probable_user_mention_entity = event.message.entities[0]
            if isinstance(probable_user_mention_entity, MessageEntityMentionName):
                user_id = probable_user_mention_entity.user_id
                user_obj = await event.client.get_entity(user_id)
                return user_obj
        try:
            user_obj = await event.client.get_entity(user)
        except (TypeError, ValueError) as err:
            await event.edit(str(err))
            return None
    return user_obj, extra


async def ge(user, event):
    if isinstance(user, str):
        user = int(user)
    try:
        user_obj = await event.client.get_entity(user)
    except (TypeError, ValueError) as err:
        await event.edit(str(err))
        return None
    return user_obj


#@Jmthon 

import time

from . import StartTime, get_readable_time, reply_id

DEFAULTUSER = "𝗝𝗠𝗧𝗛𝗢𝗡"
CAT_IMG = "https://telegra.ph/file/aa0115dc4eb24a30394d0.jpg"
CUSTOM_ALIVE_TEXT = "𓆩 𝙎𝙊𝙐𝙍𝘾-𝗝𝗠𝗧𝗛𝗢𝗡  𓆪"
EMOJI = "  - "


@bot.on(admin_cmd(outgoing=True, pattern="المطور$"))
@bot.on(sudo_cmd(pattern="المطور$", allow_sudo=True))
async def amireallyalive(alive):
    if alive.fwd_from:
        return
    reply_to_id = await reply_id(alive)
    await get_readable_time((time.time() - StartTime))
    _, check_sgnirts = check_data_base_heal_th()
    if CAT_IMG:
        cat_caption = f"**{CUSTOM_ALIVE_TEXT}**\n"
        cat_caption += f"**{EMOJI}** 𝗗𝗘𝗩 𝗨𝗦𝗘𝗥 ↬ @RRRD7  - @UUNZZ  \n"
        cat_caption += f"**{EMOJI}** 𝗗𝗘𝗩 𝗜𝗗 ↬ 1614649021 -  \n"
        await alive.client.send_file(
            alive.chat_id, CAT_IMG, caption=cat_caption, reply_to=reply_to_id
        )
        await alive.delete()
    else:
        await edit_or_reply(
            alive,
            f"**{CUSTOM_ALIVE_TEXT}**\n"
            f"**{EMOJI}** 𝗗𝗘𝗩 𝗨𝗦𝗘𝗥 ↬ @RRRD7  -  @UUNZZ  \n"
            f"**{EMOJI}** 𝗗𝗘𝗩 𝗜𝗗 ↬ 1614649021 -  ",
        )


def check_data_base_heal_th():
    # https://stackoverflow.com/a/41961968
    is_database_working = False
    output = "✾"
    if not Config.DB_URI:
        return is_database_working, output
    from userbot.plugins.sql_helper import SESSION

    try:
        # to check database we will execute raw query
        SESSION.execute("SELECT 1")
    except Exception as e:
        output = f"❌ {str(e)}"
        is_database_working = False
    else:
        output = "↫ "
        is_database_working = True
    return is_database_working, output 